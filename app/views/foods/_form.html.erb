<%= form_with(model: food, class: "contents") do |form| %>
  <%= render "shared/active_record_errors", resource: food %>
  <div class="my-5">
    <%= form.label :food_name, "Food name", class: "block font-medium text-gray-700 mb-1" %>
    <%= form.text_field :food_name,
                  class: "block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500",
                  maxlength: 64,
                  required: true,
                  placeholder: "Enter food name",
                  autocomplete: "off" %>
    <%= render partial: "shared/maximum_characters", locals: { max_characters: 64, model: Food, css_class: "text-xs" } %>
  </div>
  <div class="my-5">
    <fieldset>
      <legend class="block font-medium text-gray-700 mb-1">Qualifiers</legend>
      <p class="text-sm text-gray-500 mb-3">
        Select qualifiers that apply to this food.
      </p>
      <div class="h-60 overflow-y-auto border rounded-md p-3 bg-gray-50">
        <% if @food_qualifiers.any? %>
          <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3">
            <% @food_qualifiers.each do |qualifier| %>
              <%
                # Find existing association or use the one built in the controller
                food_food_qualifier = food.food_food_qualifiers.find { |ffq| ffq.food_qualifier_id == qualifier.id }

                # Check if this qualifier is actively associated (exists and not marked for deletion)
                existing_association = food.food_qualifiers.include?(qualifier)

                # For form re-rendering after validation error, check params
                if food_food_qualifier && params[:food] && params[:food][:food_food_qualifiers_attributes]
                  # Find this qualifier in the parameters
                  params[:food][:food_food_qualifiers_attributes].each do |_, attrs|
                    if attrs[:food_qualifier_id].to_i == qualifier.id
                      # If _destroy is "0", it should be checked
                      existing_association = (attrs[:_destroy] == "0")
                      break
                    end
                  end
                end
              %>
              <%= form.fields_for :food_food_qualifiers, food_food_qualifier do |qualifier_form| %>
                <div class="relative flex items-start py-1 px-2 rounded-md hover:bg-gray-100">
                  <div class="flex h-5 items-center">
                    <%= qualifier_form.check_box :_destroy,
                                            {checked: existing_association, inverted: true, class: "h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500"},
                                            "0", "1" %>
                    <%= qualifier_form.hidden_field :food_qualifier_id %>
                    <%= qualifier_form.hidden_field :id if qualifier_form.object.persisted? %>
                  </div>
                  <div class="ml-3 text-sm">
                    <%= label_tag nil, qualifier.qualifier_name, class: "font-medium text-gray-700 cursor-pointer" %>
                  </div>
                </div>
              <% end %>
            <% end %>
          </div>
        <% else %>
          <div class="flex items-center justify-center h-full">
            <p class="text-gray-500 italic text-sm">No existing qualifiers available.</p>
          </div>
        <% end %>
      </div>
    </fieldset>
  </div>
  <%= render partial: "shared/forms/form_buttons", locals: {
    form: form,
    resource: food,
    back_path: foods_path
  } %>
<% end %>
