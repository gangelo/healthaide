<%= form_with(model: user_food) do |form| %>
  <% if user_food.errors.any? %>
    <div id="error_explanation" class="bg-red-50 text-red-500 px-3 py-2 font-medium rounded-lg mt-3">
      <h2><%= pluralize(user_food.errors.count, "error") %> prohibited this food from being saved:</h2>

      <ul>
        <% user_food.errors.each do |error| %>
          <li><%= error.full_message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  <div class="bg-white shadow-lg rounded-lg px-8 pt-6 pb-8 mb-4" data-controller="food-form">
    <div class="space-y-6">
      <div>
        <h3 class="text-sm font-medium text-gray-700 mb-2">Select Existing Food</h3>
        <%= form.collection_select :food_id,
            Food.ordered.where.not(id: current_user.user_foods.pluck(:food_id)),
            :id,
            :food_name,
            { prompt: "-- Select --" },
            {
              class: "block shadow rounded-md border border-gray-200 outline-none px-3 py-2 mt-2 w-full",
              data: {
                food_form_target: "select",
                action: "change->food-form#handleSelect"
              }
            } %>
      </div>

      <div class="relative">
        <div class="absolute inset-0 flex items-center" aria-hidden="true">
          <div class="w-full border-t border-gray-300"></div>
        </div>
        <div class="relative flex justify-center">
          <span class="bg-white px-3 text-base font-semibold leading-6 text-gray-900">Or</span>
        </div>
      </div>

      <div>
        <h3 class="text-sm font-medium text-gray-700 mb-2">Create New Food</h3>
        <%= form.text_field :new_food_name,
            placeholder: "Enter new food name",
            class: "block shadow rounded-md border border-gray-200 outline-none px-3 py-2 mt-2 w-full",
            data: {
              food_form_target: "input",
              action: "input->food-form#handleInput"
            } %>
      </div>
    </div>

    <div class="mt-6">
      <%= form.submit "Add Food", class: "w-full rounded-lg py-3 px-5 bg-blue-600 text-white font-medium cursor-pointer hover:bg-blue-500 transition-colors" %>
    </div>
  </div>
<% end %>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const foodInput = document.getElementById('food_name_input');
  const suggestionsDiv = document.getElementById('food_suggestions');

  foodInput.addEventListener('input', function() {
    const query = this.value.trim();

    if (query.length < 2) {
      suggestionsDiv.innerHTML = '';
      return;
    }

    fetch('/foods.json?query=' + encodeURIComponent(query))
      .then(response => response.json())
      .then(data => {
        suggestionsDiv.innerHTML = '';

        if (data.length === 0) {
          const div = document.createElement('div');
          div.textContent = 'No matches found - your entry will create a new food';
          div.className = 'no-results';
          suggestionsDiv.appendChild(div);
          return;
        }

        data.forEach(food => {
          const div = document.createElement('div');
          div.textContent = food.food_name;
          div.className = 'suggestion';
          div.addEventListener('click', function() {
            foodInput.value = food.food_name;
            suggestionsDiv.innerHTML = '';
          });
          suggestionsDiv.appendChild(div);
        });
      });
  });

  // Hide suggestions when clicking outside
  document.addEventListener('click', function(e) {
    if (e.target !== foodInput && e.target !== suggestionsDiv) {
      suggestionsDiv.innerHTML = '';
    }
  });
});
</script>

<style>
.suggestions {
  position: absolute;
  border: 1px solid #ccc;
  max-height: 200px;
  overflow-y: auto;
  background: white;
  width: 100%;
  z-index: 1000;
}

.suggestion, .no-results {
  padding: 8px 12px;
  cursor: pointer;
}

.suggestion:hover {
  background-color: #f0f0f0;
}

.no-results {
  font-style: italic;
  color: #666;
}
</style>
